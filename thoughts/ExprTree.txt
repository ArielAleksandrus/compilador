3 + int x = 4 * a ? 1 - (3 * b) + 8 : ((c[2] - 3) * a) * 5 >= d[0];

leia o token t na pos 0.
    1. se t é operador unário, t é op_unario.
    2. se t é variável/literal, t é lval.
    3. se t é tipo, próx token é o nome da variável e é lval.
    demais casos, erro!

leia o próximo token t2.
    caso 1:
        1.1. se t2 é operador unário, t2 é op_unario. recursão remete a este passo. próx token será t2.
        1.2. se t2 é '(', t2 se torna expr, é lval, e junto com t, vira expr.
        1.3. se t2 é variável/literal, t2 é lval e, junto com t, vira expr.
        demais casos, erro!
    caso 2:
        2.1. t2 é operador dual. p21 = indice de prioridade de t2.
        2.2. t2 é operador ternário (ex. '?'). depois de t2 e antes do prox operador ternário (ex ':') vira expr (rval1).
                depois do segundo operador ternário (ex ':') e antes dos operadores de finalização ou próximos operadores ternários (ex ';', '?') vira expr (rval2).
                lval, '?', rval1, ':' e rval2 viram expr.
    caso 3:
        3.1. como temos o tipo e o nome, próx token é '=' e o próximo é uma expr.

leia o próximo token t3.
    caso 2.1:
        2.1.1. t3 é operador unário. remete ao passo 1.
